<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--配置整合mybatis过程
   1.配置数据库相关参数  //所有的配置都在property文件中？  classpath—在类路径中加载
   properties的属性：${url}   -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--2.数据库连接池；原来在Spring中配数据库连接-->
    <!--class属性——c3p0的数据库连接池的实现类-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!--配置连接池属性-->
        <property name="driverClass" value="${driver}"/>
        <!-- 基本属性 url、user、password；  使用${}从properties中读取数据 -->
        <property name="jdbcUrl" value="${url}"/>
        <property name="user" value="${user_name}"/>
        <property name="password" value="${password}"/>


        <!--c3p0私有属性-->
        <property name="maxPoolSize" value="30"/>
        <property name="minPoolSize" value="10"/>
        <!--关闭连接后不自动commit-->
        <property name="autoCommitOnClose" value="false"/>
        <!--设置获取连接超时时间；避免默认的一直等待（value=0）造成死锁-->
        <property name="checkoutTimeout" value="1000"/>
        <!--当获取连接失败重试次数-->
        <property name="acquireRetryAttempts" value="2"/>
    </bean>

    <!--框架的趋势：约定大于配置-->
    <!--３.配置SqlSessionFactory对象-->
    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--往下才是mybatis和spring真正整合的配置-->
        <!--注入数据库连接池；告诉数据库连接池的id依赖-->
        <property name="dataSource" ref="dataSource"/>
        <!--配置mybatis全局配置文件:mybatis-config.xml；main.java/resources都是 classpath目录  -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--扫描entity包,使用别名,多个用;隔开-->
        <property name="typeAliasesPackage" value="org.seckill.entity"/>
        <!--扫描sql配置文件:mapper需要的xml文件-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!--４:配置扫描Dao接口包,动态实现DAO接口,注入到spring容器；这一步最节省配置-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--注入SqlSessionFactory ；为了防止提前初始化sqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描的Dao接口；自动实现一个Dao接口的实现类并注入Spring容器中；spring容器 啥？？-->
        <property name="basePackage" value="org.seckill.dao"/>
    </bean>

    <!--    RedisDao-->
    <bean id="redisDao" class="org.seckill.dao.cache.RedisDao">
        <!--        value是redis的ip安装地址-->
        <constructor-arg index="0" value="192.168.153.128"/>
        <constructor-arg index="1" value="6379"/>
    </bean>
</beans>